!!ARBvp1.0

ATTRIB vertexPosition  = vertex.position;
OUTPUT outputPosition  = result.position;

# Transform the vertex by the modelview/projection matrix
DP4    outputPosition.x, state.matrix.mvp.row[0], vertexPosition;
DP4    outputPosition.y, state.matrix.mvp.row[1], vertexPosition;
DP4    outputPosition.z, state.matrix.mvp.row[2], vertexPosition;
DP4    outputPosition.w, state.matrix.mvp.row[3], vertexPosition;

MOV	result.texcoord[0], vertex.texcoord[0];

#begin tobi's crazy shader
TEMP a,b;
PARAM pos=program.env[1];
PARAM rcpsize=program.env[2];

DP3 b.x,state.matrix.modelview.transpose.row[0],state.matrix.modelview.transpose.row[3];
DP3 b.y,state.matrix.modelview.transpose.row[1],state.matrix.modelview.transpose.row[3];
DP3 b.z,state.matrix.modelview.transpose.row[2],state.matrix.modelview.transpose.row[3];

ADD a,vertexPosition,b;
ADD a,a,pos;

MUL a,a,rcpsize;

MOV  result.texcoord[1], a;
#end of tobi's crazy shader

#the rest is standard light shading:

ATTRIB iNormal      = vertex.normal;
PARAM  mvinv[4]     = { state.matrix.modelview.invtrans };
PARAM  lightDir     = state.light[0].position;
PARAM  halfDir      = state.light[0].half;
PARAM  specExp      = state.material.shininess;
PARAM  ambientCol   = state.lightprod[0].ambient;
PARAM  diffuseCol   = state.lightprod[0].diffuse;
PARAM  specularCol  = state.lightprod[0].specular;
TEMP   xfNormal, temp, dots;
OUTPUT oColor       = result.color;

# Transform the normal to eye coordinates.
DP3   xfNormal.x, mvinv[0], iNormal;
DP3   xfNormal.y, mvinv[1], iNormal;
DP3   xfNormal.z, mvinv[2], iNormal;
        
# Compute diffuse and specular dot products and use LIT to compute
# lighting coefficients.
DP3   dots.x, xfNormal, lightDir;
DP3   dots.y, xfNormal, halfDir;
MOV   dots.w, specExp.x;
LIT   dots, dots;

# Accumulate color contributions.
MAD   temp, dots.y, diffuseCol, ambientCol;
MAD   oColor.xyz, dots.z, specularCol, temp;
MOV   oColor.w, diffuseCol.w;

END