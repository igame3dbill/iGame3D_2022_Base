THE SCRIPTER'S SCRAPBOOK'The personal reference library for all programmers'Contents:Are there prebuild binary versions for iGame3D Player available?Does iGame3D support networking ?Does iGame3D support sound?How can I start iGame3D applications? How do create a custom window?How should I start with iGame3D?How to add a background image?How to add an object?How to build the source code for Mac?How to build the source code for Windows?How to change background color?How to detect object to object collissions ?How to make custom iGame3D applications?How to move an object?Is there a 'Hello World' for iGame3D Player? What are emitters?What are exporters?What are files in the Data folder are essential?What are FontPngs?What are icons?What are images?What are levels?What are materials?What are meshes?What are scripts?What are shaders?What can I do with iGame3D?What graphic formats are supported?What is FLTK?What is Fluid?What is iGame3D Player?What is iGame3D?What is Lua?What is MurgaLua?What is Newton physics?What is Ogg ?What is PNG?What is WTF?What license is iGame3D using?Where can I find the Data directory?Where can I get iGame3D Player?Where can I get the last developer previews?Which iGame3D API calls are available?Which operating systems are supported?Who are the makers of iGame3D?===============================================================Are there prebuild binary versions for iGame3D Player available?The prebuild binaries now ship with the source.In the mac version it is in ig3d_mac_xcode/build/Development/In the windows version there is the .exe inside ig3d_win_mingwThis way people without Xcode and Mingw or people who don't want to build the executables can still use iGame3D Player. However, you need SVN to checkout the source and the Data folder. SVN is also the only way to keep up to date, so there won't be another way to get the files until a release is made. See the answer to question "Where can I get the last developer previews?" for info on the svn checkout process.===============================================================Does iGame3D support networking ?Yes, using the LuaSocket extensionhttp://www.tecgraf.puc-rio.br/~diego/professional/luasocket/===============================================================Does iGame3D support sound?Yes, iGame3D Player is able to load and play sound files in the ogg format.There are a number of free and commercial ogg vorbis encoding applicationsfor both Mac and Windows at the usual download portals.===============================================================How can I start iGame3D applications?  Double click the iGame3D Player.app on Mac or iGame3D Player.exe on Windows.===============================================================How do create a custom window?--This is a simple empty window script for iGame3D Playerdo helloworld = fltk:Fl_Double_Window(210, 64, "Hello World");helloworld:show();ig3d_RebuildMacMenubar();Fl:scheme("plastic")fltk_update();end===============================================================How should I start with iGame3D?Start iGame3D Player and select a sample level from the onscreen menu.Then follow some simple scripting examples provided in the online documentation.===============================================================How to add a background image?You can use a distant large rectangular object with a texture mapped onto it and make this object a HUD object. Example:gObjects={}table.insert(gObjects, {cObj=make(ig3d_object, "square")})setObjectInfo(gObjects[1].cObj, IG3D_ROTATION, 90,0,0)setObjectInfo(gObjects[1].cObj, IG3D_HUD, true)setObjectInfo(gObjects[1].cObj, IG3D_POSITION, 0,0,-1000)setObjectInfo(gObjects[1].cObj, IG3D_SIZE, 2000,2000,2000)loadTexture("Data/Images/attackarrow.png")m=get(ig3d_material, gObjects[1].cObj, 1)setMaterialInfo(m, IG3D_TEXTURE, 1, "Data/Images/attackarrow.png")setMaterialInfo(m, IG3D_TEXTURE, 2, "")In a 3D game a skybox is looking much better and is easier to use though. Try this:setSceneInfo(IG3D_SKYBOX, "newskydesert.wtf")You can create your own skyboxes using Bryce. It requires some work to put the generated images into one texture like the one used in this newskydesert.wtf model, but it's worth the look.===============================================================How to add an object?This example creates an object at the origin of the world.table.insert(gObjects, {})gObjects[#gObjects].cObj=make(ig3d_object, "man.wtf")===============================================================How to build the source code for Mac?To build the project source from the SVN for MacOS:open /ig3d_mac_xcode/iGame3D Player.xcodeproj in Apple's Xcode IDEchoose Build>Clean All Targets from the menuschoose Build>Build from the menu.After it compiles, if nothing goes wrong, your binary file 'iGame3D Player' will be available in /ig3d_mac_xcode/build/Development/===============================================================How to build the source code for Windows?To build iGame3D player on windows you need MingW and MSYS, freely available for download. Open up MSYS. Change directory to ig3d_win_mingw using the cd command. Build the .exe using the make command.===============================================================How to change background color?setSceneInfo(IG3D_BACKGROUND_COLOR, red, green, blue)These are floating-point values ranging from 0.0 to 1.0.For example red would be: 1,0,0===============================================================How to detect object to object collissions ?You provide a callback function that handles these collisions. Example:function mycallback(objA, boneA, objB, boneB, x,y,z)	local nameA, nameB		nameA=getObjectInfo(objA.cObj, IG3D_NAME)	nameB=getObjectInfo(objB.cObj, IG3D_NAME)	print(nameA.." collided with "..nameB)endcoll_o_o=mycallbackIn this example the names of two colliding objects are printed into the console. boneA and boneB tell you which bone of object A collided with which bone of object B. x,y,z is the  exact collision point in world coordinates. coll_o_o is set to the custom callback.By default it is set to nil (unhandled collisions). There are other callbacks that can be set.<code>coll_o_p (object, particle)coll_p_p (particle, particle)coll_o_m (object, mesh)coll_p_m (particle, mesh)</code>See the load script.lua of iFly for examples usages. (bottom of the file)===============================================================How to make custom iGame3D applications?Begin with iGame3D Player/Data/game script.luafrom this file direct the iGame3D Player to your custom level folder with the commandloadLevel("Data/Levels/MyCustomLevel")===============================================================How to move an object?Usually you set the force of the object in the desired direction. You could also set the velocity directly but most of the time you should leave that to the engine. You apply forces and the physics engine calculates the velocites from that. This example shows you to move an object in the direction it is looking at:--Get the transformation matrix of the object (to find out the direction to move in)m11,m12,m13,m14, m21,m22,m23,m24, m31,m32,m33,m34, m41,m42,m43,m44=getObjectInfo(gObjects[1].cObj, IG3D_ROTATION_MATRIX)--apply a forward force to the object (you find the look vector in the 3rd row of the matrix: m31,m32,m33)setObjectInfo(gObjects[1].cObj, IG3D_FORCE, m31,m32,m33)===============================================================Is there a 'Hello World' for iGame3D Player? Here is an OpenGL Hello World example for iGame3D.-- text box creation 101gTextboxes={}-- note the image file and path you must have, its usually bundled.gTextboxes[1]=make(ig3d_text_box, "Data/FontPngs/default32_1.png")--font stylingsetText_boxInfo(gTextboxes[1], IG3D_COLOR, 1.0,1.0,1.0,1)setText_boxInfo(gTextboxes[1], IG3D_SIZE, 64)--textbox positionsetText_boxInfo(gTextboxes[1], IG3D_POSITION, 45 , 45)--define a function for the game loopfunction gamemodefunc()setText_boxInfo(gTextboxes[1], IG3D_TEXT, "Hello World")end--tell engine what function to loop in game modegame_func= gamemodefunc--tell engine what the edit loop is, for now its the sameedit_func= gamemodefuncig3d_SetMode_i(4)  -- play mode!===============================================================What are emitters?Emitters essentially are reference markers for where particles or sounds will express themselves. Particle emitters can generate replicating images with a number of attributes that create effects such as smoke, fire, debris, weather effects, blood splatter and such.They may also generate 3D models to simulate physical projectiles or destroyed material.For instance in a game scenario an object is hit with a projectile, the object is replaced by the particle emitter, and out of that emitter comes 3D particles that simulate the now destroyed object, falling away and crashing with physical effects. Sound emitters allow for the user to place sounds in the 3D environment where they are needed. For instance a particle emitter of water might be grouped with a sound emitter to get the gurgling to match up with the location of the fountain.In the 3D environment the sound would be fainter from a distance without having to adjust any parameters of the sound. ===============================================================What are exporters?Exporters allow for various files to be easily created from the iGame3D Player.3D geometry generated or modified inside the iGame3D Player can be exported to 3DS and OBJ formats. The native format for iGame3D 3D Models is called WTF and incorporates a number of elements that traditional model formats don't support, such as animation, shaders, and multi-texturing.===============================================================What are files in the Data folder are essential?iGame3D requires these files to run:Data/Scripts/core.luaData/Scripts/Convert/cxxToiGame3DLua.luaData/Scripts/LuaSocket/*Data/FontPngs/default32_1.pngData/FontPngs/default32_2.pngData/game script.luaThese are also the files that can be found in a minimal iGame3D Player.app package.But with only these files, there is no demo level of course, so better don't delete too much ;)===============================================================What are FontPngs?FontPngs are PNG image files of a font rendered to bitmap files.This is what iGame3D uses to generate 2D text on screen in the OpenGL window. The FontPngs are created with a custom tool called GLFontMaker, available at the iGame3d website. The program generates two image files with alpha channel containing the upper and lower case alphabet along with standard typographic symbols.===============================================================What are icons?Small pictures used to represent some kind of functionality. The Icons currently stored in the iGame3D project directories are hold overs from a previous incarnation of the iGame3D user interface built. They are intended to one day return in a brand new UI.===============================================================What are images?Images are the source for textures or particles in the iGame3D environment.They are loaded by the engine prior to importing models or generating the particle emitter. They are all PNG file format bitmapped graphics.The Data/Images/ directory acts as a central reposistory for mantaining the many bitmapped graphics used to model or create games. Other directories or subdirectory names can and have been used, but generally it makes scripting and file management easier to have a single place to keep the files.===============================================================What are levels?Levels are folders containing a "load script.lua" file and often a mesh for the game world. It is a good idea to organize your game into levels.  One level for a settings screen, one level for the main game GUI, one level for the actual gameplay and so on.You load a level using loadLevel() function. See http://www.igame3d.de/scripting.htmlThis load script contains information about which objects, emitters etc. are in the scene and where they are etc. That's the automatic part of the script that gets written when you save a level. You add your game code in the non-automatic part of such a script.===============================================================What are materials?Typically an object or the mesh are built up of multiple materials.A material has a color, a texture and a number of attributes that control the lighting properties of the material.For example a gold material would have high shininess and specular reflectance values with no texture while a wooden floor has a wood texture and no specular highlights. Often you dont experiment around with all those lighting settings but simply have a different texture for every material. The mesh editor is able to set the material of selected parts.===============================================================What are meshes?For the static game world, a 3D model file is loaded. This world is referred to as "The mesh". You can save this mesh as a .wtf and load as a dynamic object as well.See loadMesh(), saveMesh(), make etc. in the docs===============================================================What are scripts?Scripts are .lua files written in pure Lua code. You can load and run them using loadScript() or dofile(), while loadScript takes relative paths and dofile takes full paths.===============================================================What are shaders?Fragment and vertex shaders can be used for some graphical customization. In theory you could create bump-mapping, cartoon-shading, glow etc. using shaders.In practice the current vertex and fragment programs that iGame3D supports are written in very low-level languages, because my graphics processor does not support the high-level GLSL (OpenGL shader language). Building shaders requires an understanding of the OpenGL graphics pipeline and lots of try and error.There is a small guide about how to use shaders in materials. This feature needs some work though. You should focus on other stuff first.===============================================================What can I do with iGame3D?Import, manipulate, and exportWTF, OBJ, LWO, 3DS FormatsModel using most 3D modeling programs,or the igame3d UI modeler, or script a better one.Control attributes of:LightsParticlesMaterialsSoundsAnimationMeshPath splinesLevelsImagesMovie exportShadersBonesGroupsMaterialsTextLua ScriptingNetworkingUser InterfacesPhysicsFollow your instinct to be involved with game development.===============================================================What graphic formats are supported?iGame3D Player will import PNG files for textures, fonts, and particles.It will also and generate PNG output from the screen shot function.Animation of textures is supported by using a grid system of frames in a single image.===============================================================What is FLTK?www.FLTK.org states:"FLTK (pronounced 'fulltick') is a LGPL'd C++ graphical user interface toolkit for X (UNIX®), OpenGL, and WIN32 (Microsoft® Windows® 95, 98, ME, NT 4.0, and 2000).  It is currently maintained by a small group of developers across the world with a central repository on SourceForge.In layman's terms it is the means for user interface elements for iGame3D Player. These UI's open independent of the OpenGL window."===============================================================What is Fluid?FLUID is an acronym for Fast Light User Interface Designer.It is an FLTK application used for designing and scripting user interfaces.Through a compile function generates C++ source code as a .cxx file which then can be converted via drag and drop by the iGame3D Player to a functioning MurgaLua .lua file. ===============================================================What is iGame3D Player?iGame3D Player is an OpenGL application that supports Newton physics engine, Lua scripting ,3DS, OBJ, LWO and Mesh files, bone node animation, particles, and OpenAL sound. It is designed for game development, with built in 3D modeling functionality, level creation, model import and animation,===============================================================What is iGame3D?iGame3D is a volunteer collaboration that has actively developed 3D game design software since 2002.It is our mission to enable, encourage and support developers, artists, and enthusiasts.===============================================================What is Lua?The Lua website (http://www.lua.org) states:"Lua is a powerful, fast, light-weight, embeddable scripting language.Lua combines simple procedural syntax with powerful data description constructs based on associative arrays and extensible semantics. Lua is dynamically typed, runs by interpreting bytecode for a register-based virtual machine, and has automatic memory management with incremental garbage collection, making it ideal for configuration, scripting, and rapid prototyping."===============================================================What is MurgaLua?MurgaLua is a self contained multi-platform Lua development environment incorporating LuaSockets, FLTK, SqLite, Copas, LuaLzo, LuaFileSystem, XML and other libraries. For iGame3D it is compiled into a library and bound to the iGame3D Player creating a means of generating and displaying user interfaces while displaying an independent OpenGL window.http://www.murga-projects.com/murgaLua.html===============================================================What is Newton physics?www.newtondynamics.com states:"Newton Game Dynamics is an integrated solution for real time simulation of physics environments.The API provides scene management, collision detection, dynamic behavior and yet it is small, fast, stable and easy to use."http://www.newtondynamics.com/===============================================================What is Ogg ?Sound files for iGame3D are expected to be in the Ogg format with their file names ending in the .ogg extension.Ogg is a non-proprietary patent-free audio compression standard.Vorbis is an open source, lossy audio codec project headed by the Xiph.Org Foundation and intended to serve as a replacement for MP3.It is most commonly used in conjunction with the Ogg container and is then called Ogg Vorbishttp://www.xiph.org/ogg/doc/===============================================================What is PNG?PNG or Portable Network Graphics is a bitmapped image format standard that has gained wide adoption over the past decade, created  as a patent free replacement for the GIF format.Its greatest benefits are small file size, compression without digital artifacts and support of transparency. It supports palette-based RGB (up to 24-bits), greyscale, and standard RGB colors.===============================================================What is WTF?What is WTF?WTF is the native 3D model format for the iGame3D engine.The format is a human readable ascii text file divided into chunks of data.The important chunks of data are divided into Bones, Vertices, Paths, BoneOrientations, Groups, Edges, Materials, Animations.===============================================================What license is iGame3D using?iGame3D Source code and iGame3D Player are available under GPL.Clarifications of the GPL terms and conditions are available at www.gnu.org===============================================================Where can I find the Data directory?Depending on your operating system and the method of acquiring the iGame3D Player the location of the Data folder may change.A stand alone demonstration version of iGame3D Player will have the Data folder inside the application bundle.In MacOS Finder control click the application and choose "Show package contents" from the popup menu.The Data folder will present itself.When using SVN and building the source, the Data folder exists in two ways.First within the bundle package is a Data folder containing the essential files to run the Player.The game script in this bundle's Data folder sends the iGame3D Player application seeking outside of itself two folders looking for a Data folder.This external Data folder is a seperate branch of the repository and is downloaded into the source code's project folder.With a Windows stand alone the Data folder is within the same folder as the iGame3D Player executable, along with the necessary DLL's. ===============================================================Where can I get iGame3D Player?See answers to "Are there prebuild binary versions for iGame3D Player available?" and "Where can I get the last developer previews?"===============================================================Where can I get the last developer previews?To make life easier and reduce confusion here is the guide on how to check out iGame3D on OS X and on Windows.On both systems you will need Subversion (svn).Under Mac OS X open up a terminal window and cd (change directory) to the place where you want iGame3D stored.Then enter the following:svn co https://igame3dsource.svn.sourceforge.net/svnroot/igame3dsource/ig3d_mac_xcode ig3d_mac_xcodecd ig3d_mac_xcodesvn co https://igame3dsource.svn.sourceforge.net/svnroot/igame3dsource/Data DataAfter that open up the .xcodeproj and build iGame3D. You can run it from there as well. NOTE: the actual player is in build/Development/Don't try to run the player at the root directory.Under Windows, open the system console and also cd (change directory) to the place where you want iGame3D stored. Then enter the following:svn co https://igame3dsource.svn.sourceforge.net/svnroot/igame3dsource/ig3d_win_mingw ig3d_win_mingwcd ig3d_win_mingwsvn co https://igame3dsource.svn.sourceforge.net/svnroot/igame3dsource/Data DataThen you can use MingW/MSYS to build the player.exe or simply use the one that comes with the source.===============================================================Which iGame3D API calls are available?http://igame3d.com/help/scripting.htmlhttp://igame3d.com/help/reference.html===============================================================Which operating systems are supported?Mac OSX greater than 10.4 and Windows XP. ===============================================================Who are the makers of iGame3D?iGame3D is programmed by Tobias Opfermann, he's also responsible for the API documentation.William Griffin is manages to manage the project.Christian Mock designed this FAQ.David Drew provided the models for iFly.Charles Goran gave us a logo.John Murga created and maintains MurgaLua.===============================================================Printed Wednesday, December 12, 2007, 12:39 AMusing THE SCRIPTER'S SCRAPBOOK, the personal reference library for all programmers, by www.FlexibleLearning.com