# data file for the Fltk User Interface Designer (fluid)
version 1.0108 
header_name {.h} 
code_name {.cxx}
Function {make_window()} {open
} {
  code {gFullscreen = getSceneInfo(IG3D_FULLSCREEN) 
setSceneInfo(IG3D_FULLSCREEN, false) 


function optionsclose(w)
game_func=old_func
showGLWindowState=true
setSceneInfo(IG3D_FULLSCREEN, gFullscreen) 
ig3d_SetupWindowVisibility_b(showGLWindowState)
w:hide()
w=nil
end} {selected
  }
  code {-- prefs will be overridden if the dofile exists.
UDG_LevelsTable={
{"UDG/UDG_IntroCredits","Intro"},
{"UDG/UDG_LivingInn","Living Inn"},
{"UDG/UDG_PonchoCo","Poncho Co"},
{"UDG/UDG_Gauntlet","The Gauntlet"},
{"UDG/UDG_SnipersAlley","The Alley"}
}




--resolutionOptions
resolutionOptions={
{380,320},
{640,480},
{800,600},
{1024,640},
{1024,768},
{1152,720},
{1440,900}
}

-- udg_AudioVideoOptions & udg_ControlsSettings
udg_AudioVideoOptions={
{"Shadows","YES"},
{"Clouds","YES"},
{"Particle effects","YES"},
{"High quality models","YES"},
{"Sound effects","YES"},
{"Music","YES"}
}
udg_ControlsSettings={
{"Foward","w"},
{"Back","s"},
{"Zombie Fall","f"},
{"Zombie Rush","r"},
{"Strafe left","a"},
{"Strafe right","d"},
{"Mouse Sensitivity","7"}
}} {}
  code {local globalsfile =gameroot.."Data/Levels/UDG/UDG_Prefs/UDG_Prefs_Globals.lua"




--local f = io.open(globalsfile,"r")
 dofile(globalsfile) 
 --io.close(f)
gMouseSpeed=udg_ControlsSettings[\#udg_ControlsSettings][2]

Q='"'
if UDG_OptionsWindow ~= nil then
UDG_OptionsWindow:hide()
UDG_OptionsWindow=nil
end
gUDG_PickedLevel = "Data/Levels/UDG/UDG_IntroCredits"

gMouseMin=1
gMouseMax=10

showGLWindowState = false
ig3d_SetupWindowVisibility_b(showGLWindowState)} {}
  code {-- udg_listLevels
function udg_listLevels()
UDG_LevelsTable={}
udgPath=gameroot.."Data/Levels/UDG/"
folderList=ListFolder(udgPath,"t")
local levelslist=""
	for i,v in pairs(folderList) do 
	listedFiles=listFiles(udgPath ..v)
		for ii,vv in pairs(listedFiles) do
		--print(ii,vv)
		if vv ~= nil then 
			if string.find(vv,"load script.lua") ~= nil then
			local levelshortname = string.sub(v,string.find(v,"UDG_")+4,-1)
			table.insert(UDG_LevelsTable,{"UDG/"..v, levelshortname})
			levelslist=levelslist..levelshortname.."\\n"
			break
			end
			end
		end
	end
	return levelslist
end


--see duplicated in UDG_Utilities.lua for function overwriting UDG_LevelsTable
udg_listLevels()} {}
  code {function fill_udgLevelsBrowser()
udgLevelsBrowser:clear()

for i = 1,\#UDG_LevelsTable,1 do
udgLevelsBrowser:add(UDG_LevelsTable[i][2])
end
end

function udgLevelsBrowserCB(w)
if w:value() == nil or w:value() == 0 then return end
gUDG_PickedLevel = "Data/Levels/"..UDG_LevelsTable[w:value()][1]
end} {}
  code {-- closeUDGOptions "DONE BUTTON"

function closeUDGOptions()




if showGLWindowState == true then 
local l,t,r,b = ig3d_GetWindowBounds__4i() 
		cfile=io.open(getSceneInfo(IG3D_ROOT).."Data/Levels/UDG/UDG_Prefs/UDG_ScreenRes.lua","w")
		local sout="ig3d_SetWindowBounds_4i("..l..","..t..","..r..","..b..")\\n"
		sout=sout.."table.insert(resolutionOptions,{"..l..","..t..","..r..","..b.."})\\n"
		cfile:write(sout)
		cfile:close()	
		fltk_update()	
		
		
end

showGLWindowState=true
setSceneInfo(IG3D_FULLSCREEN, gFullscreen) 
ig3d_SetupWindowVisibility_b(true)

UDG_OptionsWindow:redraw()

if UDG_OptionsWindow ~= nil then
UDG_OptionsWindow:hide()
UDG_OptionsWindow=nil
end
game_func=fltk_update --dont do mess with text boxes

loadLevel(gUDG_PickedLevel)

end} {}
  code {-- fill_browsers
function fill_resolutionBrowser(n)
resolutionBrowser:clear()
for i = 1,\#resolutionOptions,1 do 
resolutionBrowser:add(resolutionOptions[i][1].." x "..resolutionOptions[i][2])
end
if n ~= nil then 
resolutionBrowser:select(n)
resolutionBrowser:selected(n)
resolutionBrowser:value(n)
end
end

function fill_videoOptionsBrowsers()
videoOptionsListBrowser:clear()
videoOptionsStateBrowser:clear()
for i = 1,\#udg_AudioVideoOptions,1 do
videoOptionsListBrowser:add(udg_AudioVideoOptions[i][1])
videoOptionsStateBrowser:add(udg_AudioVideoOptions[i][2])
UDG_OptionsWindow:redraw()
fltk_update()
end
end


function fill_controlsBrowser()
controlsOptionsListBrowser:clear()
controlsOptionsStateBrowser:clear()
for i = 1,\#udg_ControlsSettings-1,1 do
controlsOptionsListBrowser:add(udg_ControlsSettings[i][1])
controlsOptionsStateBrowser:add(udg_ControlsSettings[i][2])
UDG_OptionsWindow:redraw()
fltk_update()
end
end} {}
  code {-- resolutionBrowserCB

function resolutionBrowserCB(w)
 if w:value() == nil then return end
local sx=resolutionOptions[w:value()][1]
local sy=resolutionOptions[w:value()][2]
dofile(getSceneInfo(IG3D_ROOT).."Data/Levels/UDG/UDG_Prefs/UDG_ScreenRes.lua")
	local l,t,r,b = ig3d_GetWindowBounds__4i() 
ig3d_SetWindowBounds_4i(l, t, l+sx, t+sy)
local l,t,r,b = ig3d_GetWindowBounds__4i() 
	
		cfile=io.open(getSceneInfo(IG3D_ROOT).."Data/Levels/UDG/UDG_Prefs/UDG_ScreenRes.lua","w")
		local sout="ig3d_SetWindowBounds_4i("..l..","..t..","..r..","..b..")\\n"
		cfile:write(sout)
		cfile:close()	
		fltk_update()		
end} {}
  code {-- videoOptionsBrowserCB
function videoOptionsBrowserCB(w)
if w:value() == nil or w:value() == 0 then return end
local n = w:value()

if udg_AudioVideoOptions[n][2] == "YES" then
udg_AudioVideoOptions[n][2]="NO"
else
udg_AudioVideoOptions[n][2]="YES"
end
local s =""
videoOptionsStateBrowser:clear()
videoOptionsListBrowser:clear()
for i = 1,\#udg_AudioVideoOptions,1 do
print(i)
videoOptionsListBrowser:add(udg_AudioVideoOptions[i][1])
videoOptionsStateBrowser:add(udg_AudioVideoOptions[i][2])
s=s.."{"..Q..udg_AudioVideoOptions[i][1]..Q..","..Q..udg_AudioVideoOptions[i][2]..Q.."},\\n"
end

videoOptionsListBrowser:select(n)
videoOptionsStateBrowser:select(n)
videoOptionsListBrowser:value(n)
videoOptionsStateBrowser:value(n)
videoOptionsListBrowser:selected(n)
videoOptionsStateBrowser:selected(n)
UDG_OptionsWindow:redraw()
fltk_update()
sout="udg_AudioVideoOptions={"..string.sub(s,1,-3).."}"
cfile=io.open(getSceneInfo(IG3D_ROOT).."Data/Levels/UDG/UDG_Prefs/UDG_AudioVideoOptions.lua","w")
		cfile:write(sout)
		cfile:close()	
		fltk_update()

end} {}
  code {-- controlsOptionsUpdate
function controlsOptionsUpdate(n)
local s =""

if  n~=nil and n ~= 0  then 
controlsOptionsStateBrowser:clear()
controlsOptionsListBrowser:clear()
for i = 1,\#udg_ControlsSettings-1,1 do
controlsOptionsListBrowser:add(udg_ControlsSettings[i][1])
controlsOptionsStateBrowser:add(udg_ControlsSettings[i][2])
end
controlsOptionsListBrowser:select(n)
controlsOptionsStateBrowser:select(n)
controlsOptionsListBrowser:value(n)
controlsOptionsStateBrowser:value(n)
controlsOptionsListBrowser:selected(n)
controlsOptionsStateBrowser:selected(n)
keyInputFld:value(udg_ControlsSettings[n][2])
keyInputFld:show()
keyInputFld:take_focus()
end

UDG_OptionsWindow:redraw()
fltk_update()


for i = 1,\#udg_ControlsSettings,1 do
s=s.."{"..Q..udg_ControlsSettings[i][1]..Q..","..Q..udg_ControlsSettings[i][2]..Q.."},\\n"
end
sout="udg_ControlsSettings={"..string.sub(s,1,-3).."}"
cfile=io.open(getSceneInfo(IG3D_ROOT).."Data/Levels/UDG/UDG_Prefs/UDG_ControlsPrefs.lua","w")
		cfile:write(sout)
		cfile:close()	
		fltk_update()
end



function keyInputFldCB(w)
local n=controlsOptionsStateBrowser:value()
if w:value() ~= nil then
local k = string.sub(w:value(),-1,-1)

udg_ControlsSettings[n][2]= k
end

controlsOptionsUpdate(n)
end

function controlsOptionsBrowserCB(w)
if w:value() == nil or w:value() == 0 then return end
local n = w:value()
controlsOptionsUpdate(n)
end} {}
  code {-- mouseSenseRollerCB
function mouseSenseRollerCB(w)
if w:value()==nil then return end
w:label(w:value())
w:redraw()
fltk_update()
gMouseSpeed=w:value()
udg_ControlsSettings[\#udg_ControlsSettings][2] = gMouseSpeed
controlsOptionsUpdate()
end} {}
  code {--showGLWindow
function showGLWindow()
showGLWindowState= not showGLWindowState 
ig3d_SetupWindowVisibility_b(showGLWindowState)
end} {}
  code {--reset game_func
old_func=game_func

function udg_options_func()
setSceneInfo(IG3D_MOUSE_VIEW, false, 1)
fltk_update()
end

game_func=udg_options_func} {}
  Fl_Window UDG_OptionsWindow {
    label {uDeadGame Options}
    callback optionsclose open
    xywh {359 270 257 267} type Double visible
  } {
    Fl_Button UDG_OptionsdoneButton {
      label Done
      callback closeUDGOptions
      xywh {15 240 225 25} align 16 when 6
    }
    Fl_Group {} {open
      xywh {2 3 245 232}
    } {
      Fl_Tabs UDG_OptionsTabs {open
        xywh {10 3 235 232} labelsize 12
      } {
        Fl_Group LevelsGroup {
          label Levels open
          xywh {15 49 225 181} labelsize 11 align 0
        } {
          Fl_Browser udgLevelsBrowser {
            callback udgLevelsBrowserCB
            xywh {15 54 225 176} type Hold labelsize 11 textsize 10
          }
        }
        Fl_Group VideoGroup {
          label Video open
          xywh {15 41 225 181} labelsize 11 hide
        } {
          Fl_Browser resolutionBrowser {
            callback resolutionBrowserCB
            xywh {15 46 70 125} type Hold labelsize 11 textsize 10 hide
          }
          Fl_Browser videoOptionsListBrowser {
            callback videoOptionsBrowserCB
            xywh {85 46 105 125} type Hold labelsize 11 textsize 10 hide
          }
          Fl_Browser videoOptionsStateBrowser {
            callback videoOptionsBrowserCB
            xywh {190 46 44 125} type Hold labelsize 11 textsize 10 hide
          }
          Fl_Button {} {
            label {Show Window\\nand\\n Set Manually}
            callback showGLWindow
            xywh {15 176 75 39} labelsize 9 hide
          }
        }
        Fl_Group ControlsGroup {
          label Keys
          xywh {10 43 235 192} labelsize 11 align 0 hide
        } {
          Fl_Browser controlsOptionsListBrowser {
            callback controlsOptionsBrowserCB
            xywh {15 46 105 126} type Hold labelsize 11 textsize 11
          }
          Fl_Browser controlsOptionsStateBrowser {
            callback controlsOptionsBrowserCB
            xywh {120 46 40 126} type Hold labelsize 11 textsize 11
          }
          Fl_Input keyInputFld {
            label {Press Key \\n to change}
            callback keyInputFldCB
            xywh {165 100 65 21} labelsize 9 align 1 when 1 textsize 12
          }
          Fl_Button {} {
            label {Fullscreen:  Cmd + F \\n Pause:  Cmd + P \\n Quit:  Cmd + Q}
            xywh {25 176 215 55} box NO_BOX labelsize 11 when 2
          }
        }
        Fl_Group MouseSenseGroup {
          label Mouse open
          xywh {20 47 220 81} labelsize 10 hide
        } {
          Fl_Slider mouseSenseRoller {
            label 5
            callback mouseSenseRollerCB
            xywh {25 87 205 20} type Horizontal minimum 1 maximum 10 step 1 value 5
          }
          Fl_Button {} {
            label {Adjust Mouse Sensitivity}
            xywh {20 47 215 23} box NO_BOX labelsize 11 when 2
          }
        }
      }
    }
  }
  code {fill_resolutionBrowser()
fill_controlsBrowser()
fill_videoOptionsBrowsers()
keyInputFld:hide()
fill_udgLevelsBrowser()
UDG_OptionsWindow:redraw()
fltk_update()} {}
} 
